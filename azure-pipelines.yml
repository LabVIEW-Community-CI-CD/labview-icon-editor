# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml      NIPB_Path: '$(Build.Repository.LocalPath)\Tooling\deployment\NIPackage\IconEditorDeployment_x86.pbs'  - job: ExecuteScripts

trigger:
  branches:
    include:
      - users/svelderr/ci-cd

name: $(Build.BuildID)

pool: 
  name: "Default"
  demands: "iconeditor -equals true"

variables:
  build_id: $(Build.BuildID)
  build_revision: $[counter('buildCounter',1)]
  build_version: '1.0.$(Build.BuildID).$(build_revision)'
  RelativePath: 'C:\labview-icon-editor'

stages:
- stage: BuildAndTest
  displayName: Build and Test LabVIEW Project
  jobs:
  - job: ExecuteScripts
    displayName: Execute PowerShell Scripts
    steps:
    - task: PowerShell@2
      displayName: Apply VIPC 32-bit
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\Applyvipc.ps1'
        arguments: '-MinimumSupportedLVVersion 2021 -SupportedBitness 32 -RelativePath "$(RelativePath)" -VIPCPath "Tooling\deployment\Dependencies.vipc" -VIP_LVVersion "2021"'

    - task: PowerShell@2
      displayName: Add Token to LabVIEW 32-bit
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\AddTokenToLabVIEW.ps1'
        arguments: '-MinimumSupportedLVVersion 2021 -SupportedBitness 32 -RelativePath "$(RelativePath)"'

    # Continue adding PowerShell tasks for each script step
    # For example:
    - task: PowerShell@2
      displayName: Close LabVIEW 32-bit
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\Close_LabVIEW.ps1'
        arguments: '-MinimumSupportedLVVersion 2021 -SupportedBitness 32'

    - task: PowerShell@2
      displayName: Prepare LabVIEW Source 32-bit
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\Prepare_LabVIEW_source.ps1'
        arguments: '-MinimumSupportedLVVersion 2021 -SupportedBitness 32 -RelativePath "$(RelativePath)" -LabVIEW_Project "lv_icon_editor" -Build_Spec "Editor Packed Library"'

    # Repeat for other commands, ensuring `SupportedBitness` switches between 32 and 64 as needed
    - task: PowerShell@2
      displayName: Rename 32-bit Library
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\Rename-File.ps1'
        arguments: '-CurrentFilename "$(RelativePath)\resource\plugins\lv_icon.lvlibp" -NewFilename "lv_icon_x86.lvlibp"'

    # 64-bit related steps
    - task: PowerShell@2
      displayName: Apply VIPC 64-bit
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\Applyvipc.ps1'
        arguments: '-MinimumSupportedLVVersion 2021 -SupportedBitness 64 -RelativePath "$(RelativePath)" -VIPCPath "Tooling\deployment\Dependencies.vipc" -VIP_LVVersion "2021"'

    # Continue with similar structure for 64-bit tasks
    - task: PowerShell@2
      displayName: Build VIP
      inputs:
        targetType: 'filePath'
        filePath: '$(Build.Repository.LocalPath)\pipeline\scripts\build_vip.ps1'
        arguments: '-SupportedBitness 64 -RelativePath "$(RelativePath)" -VIPBPath "Tooling\deployment\NI Icon editor.vipb" -VIP_LVVersion 2021 -MinimumSupportedLVVersion 2021'

    - script: echo "All scripts executed successfully."
      displayName: Completion Message
