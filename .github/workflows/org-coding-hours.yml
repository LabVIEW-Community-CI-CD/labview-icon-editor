name: Org Coding Hours

on:
  workflow_dispatch:
    inputs:
      window_start:
        description: 'Optional start date YYYY-MM-DD'
        required: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
# ---------------------------------------------------------------------
# 1) Run the Git‑hours report and publish the JSON artefacts
# ---------------------------------------------------------------------
  report:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    - name: Run Org Coding Hours Action
      uses: LabVIEW-Community-CI-CD/org-coding-hours-action@v6
      with:
        repos: LabVIEW-Community-CI-CD/labview-icon-editor
        window_start: ${{ github.event.inputs.window_start }}
    - name: Upload reports
      uses: actions/upload-artifact@v4
      with:
        name: git-hours-json
        path: reports/*.json
        retention-days: 30

# ---------------------------------------------------------------------
# 2) Build the static KPI microsite from the artefacts
# ---------------------------------------------------------------------
  build-site:
    needs: report
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download JSON artefacts
      uses: actions/download-artifact@v4
      with:
        name: git-hours-json          # <-- matches the name set above
        path: tmp                    #    and drops everything under tmp/
        # `path` is the recommended way to relocate artefacts :contentReference[oaicite:0]{index=0}

    # -----------------------------------------------------------------
    # Build the static site – works with both old and new report names
    # -----------------------------------------------------------------
    - name: Build KPIs site
      run: |
        set -eo pipefail
        DATE=$(date +%F)

        # --- locate the aggregated report (new name is 'aggregated*.json') ---
        FILE=$(find tmp -type f -name '*aggregated*.json' | head -n 1)
        if [[ -z "$FILE" ]]; then
          echo "❌ Aggregated report not found"; exit 1;
        fi

        # --- stage JSON snapshots ------------------------------------------------
        mkdir -p site/data
        cp tmp/*.json site/data/                        # every run‑level JSON
        cp "$FILE" "site/data/git-hours-${DATE}.json"   # dated snapshot
        cp "$FILE"  site/git-hours-latest.json          # rolling pointer

        # --- generate HTML -------------------------------------------------------
        export FILE DATE                                 # used by inline Python
        python - <<'PY'
        import json, os, pathlib, glob, html, textwrap, datetime

        agg_file = os.environ['FILE']
        date     = os.environ['DATE']
        data     = json.load(open(agg_file))
        total    = data['total']

        # Contributors table (all repos)
        labels = [k for k in data if k != 'total']
        rows   = "\n".join(
            f"<tr><td>{html.escape(l)}</td><td>{data[l]['hours']}</td>"
            f"<td>{data[l]['commits']}</td></tr>" for l in labels)

        # Per‑repo sections (any json not tagged as aggregated)
        sections = []
        for path in glob.glob('tmp/*.json'):
            if 'aggregated' in path:          # skip master file
                continue
            repo_key = pathlib.Path(path).stem.replace('_','/')  # new v6 scheme
            repo     = html.escape(repo_key)
            rdata    = json.load(open(path))
            rlabels  = [k for k in rdata if k != 'total']
            rrows    = "\n".join(
                f"<tr><td>{html.escape(l)}</td><td>{rdata[l]['hours']}</td>"
                f"<td>{rdata[l]['commits']}</td></tr>" for l in rlabels)

            sections.append(
                f"<h2>{repo}</h2><table class='sortable'>"
                f"<thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th>"
                f"</tr></thead><tbody>{rrows}</tbody></table>"
            )

        html_page = f'''
        <!doctype html><html lang="en"><head>
          <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Collaborator KPIs</title>
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simpledotcss/simple.min.css">
          <script src="https://cdn.jsdelivr.net/npm/sortable-tablesort/sortable.min.js" defer></script>
          <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
          <style>canvas{{max-height:400px}}</style>
        </head><body><main>
          <h1>Collaborator KPIs</h1>
          <p><em>Last updated {datetime.datetime.utcnow():%Y-%m-%d %H:%M UTC}</em></p>

          <h2>Totals (all repos)</h2>
          <ul>
            <li><strong>Hours</strong>: {total['hours']}</li>
            <li><strong>Commits</strong>: {total['commits']}</li>
            <li><strong>Contributors</strong>: {len(data)-1}</li>
          </ul>

          <h2>Hours per contributor</h2><canvas id="hoursChart"></canvas>
          <h2>Commits per contributor</h2><canvas id="commitsChart"></canvas>

          <h2>Detail table (all repos)</h2>
          <table class="sortable">
            <thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th></tr></thead>
            <tbody>{rows}</tbody>
          </table>

          {''.join(sections)}

          <p>Historical JSON snapshots live in <code>/data</code>.</p>

          <script>
            fetch('git-hours-latest.json')
              .then(r => r.json())
              .then(d => {{
                const labels  = Object.keys(d).filter(k => k !== "total");
                const hours   = labels.map(l => d[l].hours);
                const commits = labels.map(l => d[l].commits);
                new Chart(document.getElementById("hoursChart"), {{
                  type: "bar",
                  data: {{ labels, datasets:[{{label:"Hours",data:hours}}] }},
                  options: {{
                    responsive:true, maintainAspectRatio:false,
                    plugins:{{legend:{{display:false}}}},
                    scales:{{y:{{beginAtZero:true}}}}
                  }}
                }});
                new Chart(document.getElementById("commitsChart"), {{
                  type: "bar",
                  data: {{ labels, datasets:[{{label:"Commits",data:commits}}] }},
                  options: {{
                    responsive:true, maintainAspectRatio:false,
                    plugins:{{legend:{{display:false}}}},
                    scales:{{y:{{beginAtZero:true}}}}
                  }}
                }});
              }});
          </script>
        </main></body></html>
        '''
        pathlib.Path('site/index.html').write_text(textwrap.dedent(html_page))
        PY

    - name: Upload Pages artefact
      uses: actions/upload-pages-artifact@v3
      with:
        path: site

# ---------------------------------------------------------------------
# 3) Publish to GitHub Pages
# ---------------------------------------------------------------------
  deploy-pages:
    needs: build-site
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - id: deployment
      uses: actions/deploy-pages@v4
