# .github/workflows/coding‑hours.yml
name: Coding‑hours report

on:
  schedule:
    - cron: '0 0 * * 1'          # every Monday 00:00 UTC
  workflow_dispatch:
    inputs:
      window_start:
        description: 'Report since YYYY‑MM‑DD'
        required: false

permissions:
  contents: write                # push to metrics & gh‑pages

###############################################################################
# Job 1 – produce JSON report, badge, commit to `metrics`
###############################################################################
jobs:
  report:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Full checkout
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2️⃣ System libraries required by openssl‑sys  ➜ libssl‑dev + pkg‑config
      - name: Install build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev pkg-config

      # 3️⃣ Rust tool‑chain (tiny footprint)
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # 3️⃣ Install jikyuu (≈ 20 s compile)
      - name: Install jikyuu
        run: cargo install --locked jikyuu

      # 4️⃣ jq (already on ubuntu‑latest, but add for self‑hosted)
      - run: sudo apt-get update -y && sudo apt-get install -y jq
        name: Ensure jq

      # 5️⃣ Generate raw JSON with jikyuu
      - name: Generate coding‑hours JSON
        run: |
          ARGS=""
          if [ -n "${{ github.event.inputs.window_start }}" ]; then
            ARGS+=" --since ${{ github.event.inputs.window_start }}"
          fi
          # jikyuu JSON  → array, reshape to the structure your badges expect
          jikyuu --format json $ARGS | \
            jq 'reduce .[] as $i ({"total":{"name":"","hours":0,"commits":0}};
                 .[$i.email]   = {name:$i.email,
                                  hours:($i.hours|floor),
                                  commits:$i.commit_count}
                 | .total.hours   += ($i.hours|floor)
                 | .total.commits += $i.commit_count)' \
            > git-hours.json

      # 6️⃣ Build Shields.io badge
      - name: Build badge.json
        run: |
          HOURS=$(jq '.total.hours' git-hours.json)
          cat > badge.json <<EOF
          { "schemaVersion":1,
            "label":"Coding hours",
            "message":"${HOURS}h",
            "color":"informational" }
          EOF

      # 7️⃣ Nice summary on the run page
      - name: Add workflow summary
        run: |
          echo "### ⏱ Coding‑hours report" >> "$GITHUB_STEP_SUMMARY"
          jq -r '
            ["Contributor","Hours","Commits"],
            to_entries
            | map(select(.key!="total"))
            | map([ .key, (.value.hours|tostring), (.value.commits|tostring) ])
            | .[]
            | @tsv' git-hours.json | column -t -s $'\t' >> "$GITHUB_STEP_SUMMARY"

      # 8️⃣ Upload artifact for the Pages job
      - uses: actions/upload-artifact@v4
        with:
          name: git-hours-output-${{ github.run_id }}
          path: git-hours.json
          retention-days: 30

      # 9️⃣ Commit badge + snapshot to `metrics`
      - name: Commit metrics & badge
        if: github.ref == 'refs/heads/develop'        # change if needed
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}             # PAT with repo scope
        run: |
          git config --global user.name  "git-hours bot"
          git config --global user.email "bot@github.com"

          git fetch origin metrics || true
          git switch metrics 2>/dev/null || git switch -c metrics

          mkdir -p reports
          mv git-hours.json "reports/git-hours-$(date +%F).json"
          git add reports badge.json
          git commit -m "chore(metrics): add report $(date +%F)" || echo "No change"
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} metrics

###############################################################################
# Job 2 – build static site and publish to GitHub Pages (`gh-pages`)
###############################################################################
  build-pages:
    needs: report
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1️⃣ Pull the JSON we just produced
      - uses: actions/download-artifact@v4
        with:
          name: git-hours-output-${{ github.run_id }}
          path: tmp                                   # tmp/git-hours.json

      # 2️⃣ Build the simple HTML dashboard
      - name: Build KPIs site
        run: |
          mkdir -p site/data
          cp tmp/git-hours.json "site/data/git-hours-$(date +%F).json"

          python - <<'PY'
          import json, datetime, pathlib, html, textwrap
          raw = json.load(open('tmp/git-hours.json'))
          total = raw['total']
          rows = "\n".join(
              f"<tr><td>{html.escape(k)}</td>"
              f"<td>{v['hours']}</td><td>{v['commits']}</td></tr>"
              for k,v in raw.items() if k != 'total')
          page = f"""
          <!doctype html><html lang='en'><head>
            <meta charset='utf-8'>
            <title>Collaborator KPIs</title>
            <link rel='stylesheet'
                  href='https://cdn.jsdelivr.net/npm/simpledotcss/simple.min.css'>
            <script src='https://cdn.jsdelivr.net/npm/sortable-tablesort/sortable.min.js' defer></script>
          </head><body><main>
            <h1>Collaborator KPIs</h1>
            <p><em>Last updated {datetime.datetime.utcnow():%Y‑%m‑%d %H:%M UTC}</em></p>
            <h2>Totals</h2>
            <ul>
              <li><strong>Hours</strong>: {total['hours']}</li>
              <li><strong>Commits</strong>: {total['commits']}</li>
              <li><strong>Contributors</strong>: {len(raw)-1}</li>
            </ul>
            <h2>Per‑contributor breakdown</h2>
            <table class='sortable'>
              <thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th></tr></thead>
              <tbody>{rows}</tbody>
            </table>
            <p>Historical JSON snapshots live in <code>/data</code>.</p>
          </main></body></html>"""
          pathlib.Path('site/index.html').write_text(textwrap.dedent(page))
          PY

      # 3️⃣ Publish to gh‑pages
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
