name: Coding‑hours report

on:
  schedule:
    - cron: '0 0 * * 1'                 # every Monday 00:00 UTC
  workflow_dispatch:
    inputs:
      repos:
        description: 'Space-separated list of owner/repo names'
        required: true
        default: 'ni/actor-framework ni/labview-icon-editor ni/open-source'
      window_start:
        description: 'Report since YYYY‑MM‑DD'
        required: false

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
###############################################################################
# Job 1 – run git‑hours (Go), build badge, commit to `metrics`
###############################################################################
  report:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    env:
      REPOS: ${{ github.event.inputs.repos || 'ni/actor-framework ni/labview-icon-editor ni/open-source' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-go@v4
      with: { go-version: '1.24' }

    - name: Install git‑hours v0.1.2
      run: |
        git clone --depth 1 --branch v0.1.2 https://github.com/trinhminhtriet/git-hours.git git-hours-src
        sed -i 's/go 1.24.1/go 1.24/' git-hours-src/go.mod
        (cd git-hours-src && go install .)
        # v0.1.2 has no --version flag; show help header instead
        git-hours -h | head -n 1

    - name: Run git-hours across repos
      env:
        REPOS: ${{ env.REPOS }}
        WINDOW_START: ${{ github.event.inputs.window_start }}
      run: |
        python .github/scripts/org_coding_hours.py

    - name: Install jq
      run: sudo apt-get update -y && sudo apt-get install -y jq

    - name: Build badge.json
      run: |
        AGG=$(ls reports/git-hours-aggregated-*.json | head -n1)
        HOURS=$(jq '.total.hours' "$AGG")
        cat > badge.json <<EOF
        { "schemaVersion":1,
          "label":"Coding hours",
          "message":"${HOURS}h",
          "color":"informational" }
        EOF

    - name: Add workflow summary
      run: |
        AGG=$(ls reports/git-hours-aggregated-*.json | head -n1)
        echo "### ⏱ Coding‑hours report" >> "$GITHUB_STEP_SUMMARY"
        jq -r '
          to_entries
          | map(select(.key!="total"))
          | sort_by(-.value.hours)
          | (["Contributor","Hours","Commits"]
             , (map([.key, (.value.hours|tostring), (.value.commits|tostring)])))
          | @tsv' "$AGG" | column -t -s $'\t' >> "$GITHUB_STEP_SUMMARY"

    - uses: actions/upload-artifact@v4
      with:
        name: git-hours-json
        path: reports/*.json
        retention-days: 30

    # ──────────────────────────── PATCH ③ safer push logic ───────────
    - name: Push to metrics branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name  "git-hours bot"
        git config --global user.email "bot@github.com"

        # Stash everything (tracked + untracked) so checkout can’t complain.
        git stash push --include-untracked --quiet

        # Ensure we have the latest metrics from remote, if it exists.
        git fetch origin metrics || true
        if git show-ref --quiet refs/remotes/origin/metrics; then
          git switch --quiet metrics || git switch -c metrics origin/metrics
          git pull --ff-only origin metrics || true
        else
          git switch --orphan metrics
          git reset --hard
        fi

        # Restore stashed badge.json + reports/
        git stash pop --quiet || true

        git add reports badge.json
        git commit -m "chore(metrics): report $(date +%F)" || echo "No change"

        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} metrics \
        || git push --force-with-lease https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} metrics


###############################################################################
# Job 2 – build Site & upload Pages artifact
###############################################################################
  build-site:
    needs: report
    runs-on: ubuntu-latest
    env:
      REPOS: ${{ env.REPOS }}

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with: { name: git-hours-json, path: tmp }

    - name: Build KPIs site
      env:
        REPOS: ${{ env.REPOS }}
      run: |
        DATE=$(date +%F)
        mkdir -p site/data
        for f in tmp/*.json; do
          cp "$f" "site/data/$(basename "$f")"
          base=$(basename "$f")
          latest=${base%-${DATE}.json}-latest.json
          cp "$f" "site/$latest"
        done

        python - <<'PY'
        import json, datetime, pathlib, html, textwrap, os, re
        tmp = pathlib.Path('tmp')
        files = list(tmp.glob('git-hours-*.json'))
        repo_map = {r.replace('/', '_'): r for r in os.environ['REPOS'].split()}
        reports = []
        for f in files:
            data = json.load(f.open())
            name = f.stem
            if 'aggregated' in name:
                continue
            slug = re.sub(r'^git-hours-|-\d{4}-\d{2}-\d{2}$', '', name)
            reports.append((slug, repo_map.get(slug, slug), data))

        page_sections = []
        for slug, title, data in reports:
            labels = [html.escape(k) for k in data if k != 'total']
            rows = "\n".join(
                f"<tr><td>{l}</td><td>{data[l]['hours']}</td><td>{data[l]['commits']}</td></tr>"
                for l in labels)
            total = data['total']
            page_sections.append(f"""
          <h2>{title}</h2>
          <ul>
            <li><strong>Hours</strong>: {total['hours']}</li>
            <li><strong>Commits</strong>: {total['commits']}</li>
            <li><strong>Contributors</strong>: {len(data)-1}</li>
          </ul>
          <canvas id='hoursChart-{slug}'></canvas>
          <h3>Detail table</h3>
          <table class='sortable'>
            <thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th></tr></thead>
            <tbody>{rows}</tbody>
          </table>
        """)

        page = f"""
        <!doctype html><html lang='en'><head>
          <meta charset='utf-8'>
          <title>Collaborator KPIs</title>
          <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/simpledotcss/simple.min.css'>
          <script src='https://cdn.jsdelivr.net/npm/sortable-tablesort/sortable.min.js' defer></script>
          <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          <style>canvas{max-height:400px}</style>
        </head><body><main>
          <h1>Collaborator KPIs</h1>
          <p><em>Last updated {datetime.datetime.utcnow():%Y-%m-%d %H:%M UTC}</em></p>
          {''.join(page_sections)}
          <p>Historical JSON snapshots live in <code>/data</code>.</p>
          <script>
            const repos = {json.dumps([slug for slug,_,_ in reports])};
            repos.forEach(slug => {
              fetch(`git-hours-${slug}-latest.json`)
                .then(r => r.json())
                .then(d => {
                  const labels = Object.keys(d).filter(k => k !== 'total');
                  const hours  = labels.map(l => d[l].hours);
                  new Chart(document.getElementById(`hoursChart-${slug}`), {
                    type: 'bar',
                    data: { labels, datasets:[{label:'Hours',data:hours}] },
                    options: { responsive:true, maintainAspectRatio:false,
                              plugins:{legend:{display:false}},
                              scales:{y:{beginAtZero:true}} }
                  });
                });
            });
          </script>
        </main></body></html>
        """
        pathlib.Path('site/index.html').write_text(textwrap.dedent(page))
        PY

    # ───────────────────── PATCH ② bump to v3 (uses artifact@v4) ──────
    - uses: actions/upload-pages-artifact@v3
      with: { path: site }
    # ───────────────────────────────────────────────────────────────────

###############################################################################
# Job 3 – deploy to GitHub Pages
###############################################################################
  deploy-pages:
    needs: build-site
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - id: deployment
      uses: actions/deploy-pages@v4
