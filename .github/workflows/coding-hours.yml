name: Coding‑hours report

on:
  schedule:
    - cron: '0 0 * * 1'          # every Monday 00:00 UTC
  workflow_dispatch:
    inputs:
      window_start:
        description: 'Report since YYYY‑MM‑DD'
        required: false

# GITHUB_TOKEN gets write access for branch pushes
permissions:
  contents: write

jobs:
###############################################################################
# Job 1 ─ Generate JSON, create badge, commit to `metrics`
###############################################################################
  report:
    runs-on: ubuntu-latest

    steps:
      # 1 Checkout full history
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2 System deps for the Rust OpenSSL binding + jq for later
      - name: Install build prerequisites
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev pkg-config jq

      # 3 Minimal Rust tool‑chain (≈50 MB)
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # 4 Install jikyuu (≈20 s compile)
      - name: Install jikyuu
        run: cargo install --locked jikyuu

      # 5 Generate raw report (per‑email)
      - name: Generate coding‑hours JSON
        run: |
          ARGS=""
          if [ -n "${{ github.event.inputs.window_start }}" ]; then
            ARGS+=" --since ${{ github.event.inputs.window_start }}"
          fi

          jikyuu --format json $ARGS \
          | jq 'reduce .[] as $c ({"total":{"hours":0,"commits":0}};
                 .[$c.email] = {hours:($c.hours|floor),
                                commits:$c.commit_count}
                 | .total.hours   += ($c.hours|floor)
                 | .total.commits += $c.commit_count)' \
          > git-hours.json

      # 6 Build Shields.io badge
      - name: Build badge.json
        run: |
          HOURS=$(jq '.total.hours' git-hours.json)
          cat > badge.json <<EOF
          { "schemaVersion":1,
            "label":"Coding hours",
            "message":"${HOURS}h",
            "color":"informational" }
          EOF

      # 7 Readable table in the job summary
      - name: Add workflow summary
        run: |
          echo "### ⏱ Coding‑hours report" >> "$GITHUB_STEP_SUMMARY"
          jq -r '
            to_entries
            | map(select(.key!="total"))
            | sort_by(-.value.hours)
            | (["Contributor","Hours","Commits"]
               , (map([.key, (.value.hours|tostring), (.value.commits|tostring)])))
            | @tsv' git-hours.json | column -t -s $'\t' >> "$GITHUB_STEP_SUMMARY"

      # 8 Upload for the Pages job
      - uses: actions/upload-artifact@v4
        with:
          name: git-hours-output-${{ github.run_id }}
          path: git-hours.json
          retention-days: 30

      # 9 Commit badge + snapshot to metrics (develop only)
      - name: Commit metrics & badge
        if: github.ref == 'refs/heads/develop'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name  "git-hours bot"
          git config --global user.email "bot@github.com"

          git fetch origin metrics || true
          git switch metrics 2>/dev/null || git switch -c metrics

          mkdir -p reports
          cp git-hours.json "reports/git-hours-$(date +%F).json"
          git add reports badge.json
          git commit -m "chore(metrics): report $(date +%F)" || echo "No change"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} metrics

###############################################################################
# Job 2 ─ Build static dashboard (with bar‑chart) & deploy to GitHub Pages
###############################################################################
  build-pages:
    needs: report
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 1 Download JSON from previous job
      - uses: actions/download-artifact@v4
        with:
          name: git-hours-output-${{ github.run_id }}
          path: tmp                       # → tmp/git-hours.json

      # 2 Assemble site
      - name: Build KPIs site
        run: |
          DATE=$(date +%F)
          mkdir -p site/data
          cp tmp/git-hours.json "site/data/git-hours-${DATE}.json"
          cp tmp/git-hours.json  site/git-hours-latest.json   # easy fetch for chart

          python - <<'PY'
          import json, datetime, pathlib, html, textwrap
          raw   = json.load(open('tmp/git-hours.json'))
          total = raw["total"]
          #  Collect data for JS
          labels = [html.escape(k) for k in raw.keys() if k != "total"]
          hours  = [raw[k]["hours"] for k in labels]

          rows = "\n".join(
              f"<tr><td>{l}</td><td>{raw[l]['hours']}</td><td>{raw[l]['commits']}</td></tr>"
              for l in labels)

          page = f"""
          <!doctype html><html lang='en'><head>
            <meta charset='utf-8'>
            <title>Collaborator KPIs</title>
            <link rel='stylesheet'
                  href='https://cdn.jsdelivr.net/npm/simpledotcss/simple.min.css'>
            <script src='https://cdn.jsdelivr.net/npm/sortable-tablesort/sortable.min.js' defer></script>
            <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
          </head><body><main>
            <h1>Collaborator KPIs</h1>
            <p><em>Last updated {datetime.datetime.utcnow():%Y‑%m‑%d %H:%M UTC}</em></p>

            <h2>Totals</h2>
            <ul>
              <li><strong>Hours</strong>: {total['hours']}</li>
              <li><strong>Commits</strong>: {total['commits']}</li>
              <li><strong>Contributors</strong>: {len(raw)-1}</li>
            </ul>

            <h2>Hours per contributor</h2>
            <canvas id='hoursChart' style='max-height:400px'></canvas>

            <h2>Detail table</h2>
            <table class='sortable'>
              <thead><tr><th>Contributor</th><th>Hours</th><th>Commits</th></tr></thead>
              <tbody>{rows}</tbody>
            </table>

            <p>Historical JSON snapshots live in <code>/data</code>.</p>

            <script>
              fetch('git-hours-latest.json')
                .then(r => r.json())
                .then(d => {{
                  const labels = Object.keys(d).filter(k => k !== 'total');
                  const hours  = labels.map(l => d[l].hours);
                  new Chart(document.getElementById('hoursChart'), {{
                    type: 'bar',
                    data: {{
                      labels: labels,
                      datasets: [{{ label: 'Hours', data: hours }}]
                    }},
                    options: {{ responsive: true, maintainAspectRatio: false }}
                  }});
                }});
            </script>
          </main></body></html>"""
          pathlib.Path('site/index.html').write_text(textwrap.dedent(page))
          PY

      # 3 Deploy via gh‑pages branch
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
