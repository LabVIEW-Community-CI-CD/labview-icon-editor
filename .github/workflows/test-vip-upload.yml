name: Test VIP Upload

on:
  workflow_dispatch:

jobs:
  test-attach:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 1) (Optional) Check out code, if needed
      ########################################################################
      - name: Checkout
        uses: actions/checkout@v3

      ########################################################################
      # 2) Create dummy .vip files
      ########################################################################
      - name: Create dummy .vip files
        run: |
          mkdir -p "builds/VI Package"
          echo "Some dummy content" > "builds/VI Package/test file 1.vip"
          echo "Some dummy content" > "builds/VI Package/test file 2 (spaced).vip"
          ls -R "builds/VI Package"

      ########################################################################
      # 3) Create a draft GitHub Release
      ########################################################################
      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "test-tag",          // arbitrary tag for demo
              name: "Test Release for VIP Upload",
              draft: true                    // keep it draft so you can see artifacts before publishing
            });
            core.setOutput("upload_url", response.data.upload_url);
            core.info(`Created release => test-tag`);

      ########################################################################
      # 4) Attach .vip files to Release (robust version)
      ########################################################################
      - name: Attach .vip files to Release (robust version)
        if: ${{ success() }}
        shell: pwsh
        run: |
          # 1) Gather .vip files
          $vipFiles = Get-ChildItem -Path "builds/VI Package" -Filter "*.vip" -ErrorAction SilentlyContinue

          # 2) Exit if no .vip found
          if (!$vipFiles) {
            Write-Warning "No .vip files found in 'builds/VI Package'!"
            exit 0
          }

          # 3) Ensure we have an upload URL
          $uploadUrl = '${{ steps.create_release.outputs.upload_url }}'
          if (-not $uploadUrl) {
            Write-Warning "No upload_url from create_release step."
            exit 0
          }

          # 4) Strip off '{?name,label}' from the upload URL
          $uploadUrlClean = $uploadUrl.Split('{')[0]

          # 5) Add System.Web for URL encoding
          Add-Type -AssemblyName System.Web

          # 6) Loop through each .vip, attach to the release
          foreach ($vipFile in $vipFiles) {
            # Encode the filename (handles spaces, parentheses, etc.)
            $fileNameEncoded = [System.Web.HttpUtility]::UrlEncode($vipFile.Name)
            $assetUri        = "$uploadUrlClean?name=$fileNameEncoded"

            Write-Host "Attaching VIP file: $($vipFile.FullName)"
            Write-Host "Constructed upload URL => $assetUri"

            # Must prefix the token with 'Bearer'
            $headers = @{
              "Authorization" = "Bearer $($env:GITHUB_TOKEN)"
              "Content-Type"  = "application/octet-stream"
            }

            try {
              Invoke-RestMethod `
                -Uri $assetUri `
                -Method POST `
                -Headers $headers `
                -InFile $vipFile.FullName

              Write-Host "Successfully uploaded '$($vipFile.Name)'!"
            }
            catch {
              Write-Error "Upload failed for '$($vipFile.Name)': $($_.Exception.Message)"
              exit 1
            }
          }
