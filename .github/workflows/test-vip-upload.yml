name: Test VIP Upload

on:
  workflow_dispatch:

jobs:
  test-attach:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 1) (Optional) Check out code, if needed
      ########################################################################
      - name: Checkout
        uses: actions/checkout@v3

      ########################################################################
      # 2) Create dummy .vip files
      ########################################################################
      - name: Create dummy .vip files
        run: |
          mkdir -p "builds/VI Package"
          echo "Some dummy content" > "builds/VI Package/test file 1.vip"
          echo "Some dummy content" > "builds/VI Package/test file 2 (spaced).vip"
          ls -R "builds/VI Package"

      ########################################################################
      # 3) Create a draft GitHub Release
      ########################################################################
      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "test-tag",          // arbitrary tag for demo
              name: "Test Release for VIP Upload",
              draft: true                    // keep it draft so you can see artifacts before publishing
            });
            core.setOutput("upload_url", response.data.upload_url);
            core.info(`Created release => test-tag`);

      ########################################################################
      # 4) Attach .vip files to Release (robust version)
      ########################################################################
      - name: Attach .vip files to Release (robust version)
      shell: pwsh
      run: |
        $vipFiles = Get-ChildItem -Path "builds/VI Package" -Filter "*.vip" -ErrorAction SilentlyContinue
        if (!$vipFiles) {
          Write-Warning "No .vip files found"
          exit 0
        }
    
        # 1) Grab the upload URL
        $uploadUrl = '${{ steps.create_release.outputs.upload_url }}'
        if (-not $uploadUrl) {
          Write-Warning "No upload_url from create_release step."
          exit 0
        }
    
        # 2) Remove '{?name,label}' from the URL
        #    (Use either -replace with a regex or just Replace)
        $uploadUrlClean = $uploadUrl.Replace('{?name,label}', '')
    
        # 3) Use System.Web for URL-encoding
        Add-Type -AssemblyName System.Web
    
        foreach ($vipFile in $vipFiles) {
          $fileNameEncoded = [System.Web.HttpUtility]::UrlEncode($vipFile.Name)
          $assetUri        = "$uploadUrlClean?name=$fileNameEncoded"
    
          Write-Host "Attaching VIP file: $($vipFile.FullName)"
          Write-Host "Constructed upload URL => $assetUri"
    
          $headers = @{
            "Authorization" = "Bearer $($env:GITHUB_TOKEN)"
            "Content-Type"  = "application/octet-stream"
          }
    
          try {
            Invoke-RestMethod `
              -Uri $assetUri `
              -Method POST `
              -Headers $headers `
              -InFile $vipFile.FullName
    
            Write-Host "Successfully uploaded '$($vipFile.Name)'!"
          }
          catch {
            Write-Error "Upload failed for '$($vipFile.Name)': $($_.Exception.Message)"
            exit 1
          }
        }
