name: Coding‑hours report

on:
  # ───────── Scheduled & manual ─────────
  schedule:
    - cron: '0 0 * * 1'           # Every Monday 00:00 UTC
  workflow_dispatch:
    inputs:
      window_start:
        description: 'Analyse commits since YYYY‑MM‑DD (defaults to last Monday)'
        required: false
      window_end:
        description: 'Analyse commits until YYYY‑MM‑DD (defaults to today)'
        required: false

# ───────── Global settings ─────────
concurrency:                       # Never run two reports for the same ref
  group: coding-hours-${{ github.ref_name }}
  cancel-in-progress: true        # saves minutes :contentReference[oaicite:0]{index=0}

permissions:
  contents: write
  actions: read                   # least‑privilege hardening
  id-token: write                 # future‑proof (e.g. signing artefacts)

env:
  GO_VERSION: '1.24'              # maintain centrally
  GITHOURS_VERSION: 'v0.1.2'

jobs:
  report:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:

    # 1️⃣ Full clone (needed by git‑hours history scan)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2️⃣ Set up Go (+ built‑in dependency cache)
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true               # re‑uses module cache :contentReference[oaicite:1]{index=1}

    # 3️⃣ Cache the compiled git‑hours binary
    - name: Cache git‑hours
      id: cache-githours
      uses: actions/cache@v4
      with:
        path: ~/go/bin/git-hours
        key: git-hours-${{ env.GO_VERSION }}-${{ env.GITHOURS_VERSION }}

    # 4️⃣ Install git‑hours **only if cache missed**
    - name: Install git‑hours (patched go.mod)
      if: steps.cache-githours.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch $GITHOURS_VERSION https://github.com/trinhminhtriet/git-hours.git /tmp/git-hours
        # go.mod currently says "go 1.24.1" (invalid); normalise → 1.24
        sed -i 's/go 1\.24\.1/go 1.24/' /tmp/git-hours/go.mod
        (cd /tmp/git-hours && go install .)

    # 5️⃣ Figure out reporting window (defaults are auto‑calculated)
    - name: Compute date window
      id: dates
      run: |
        since="${{ github.event.inputs.window_start }}"
        until="${{ github.event.inputs.window_end }}"
        [[ -z "$since" ]] && since=$(date -u -d "last monday" +%F)
        [[ -z "$until" ]] && until=$(date -u +%F)
        echo "since=$since"  >> $GITHUB_OUTPUT
        echo "until=$until"  >> $GITHUB_OUTPUT

    # 6️⃣ Generate report
    - name: Generate git‑hours report
      run: |
        git-hours -since "${{ steps.dates.outputs.since }}" \
                  -until "${{ steps.dates.outputs.until }}" > git-hours.txt

    # 7️⃣ Publish a nice run summary
    - name: Add workflow summary
      run: |
        {
          echo "## ⏱ Coding‑hours report"
          echo "_${{ steps.dates.outputs.since }} → ${{ steps.dates.outputs.until }}_"
          echo ''
          echo '```text'
          cat git-hours.txt
          echo '```'
        } >> "$GITHUB_STEP_SUMMARY"

    # 8️⃣ Upload raw artifacts
    - uses: actions/upload-artifact@v4
      with:
        name: git-hours-${{ github.run_id }}
        path: git-hours.txt
        retention-days: 30

  # 9️⃣ Optionally commit to the `metrics` branch (only from default branch)
    - name: Commit to metrics branch
      if: github.ref_name == 'main'          # ✅ reference to `secrets` removed
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}      # secret still injected for the step
      run: |
        if [ -z "$GH_TOKEN" ]; then
          echo "GH_PAT secret not set — skipping metrics commit"
          exit 0
        fi

        git config --global user.name  "git‑hours bot"
        git config --global user.email "bot@github.com"
        git fetch origin metrics || true
        git switch -C metrics origin/metrics || git switch -C metrics
        mkdir -p reports
        cp git-hours.txt "reports/git-hours-${{ steps.dates.outputs.since }}_to_${{ steps.dates.outputs.until }}.txt"
        git add reports
        git commit -m "chore(metrics): coding hours ${{ steps.dates.outputs.since }}→${{ steps.dates.outputs.until }}" || {
          echo "No changes to commit"; exit 0; }
        git push "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}" HEAD:metrics

jobs:
  # ─────────────────────────────────────────────
  # 1️⃣  Your “report” job (unchanged) …
  # ─────────────────────────────────────────────

  trend-graph:
    needs: report                 # run only after the raw‑data job
    if: github.ref_name == 'main' # don’t waste minutes on other branches
    runs-on: ubuntu-latest

    steps:
    # 1️⃣  Check out the metrics branch *with history*
    - name: Checkout metrics branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0            # need full history for git
        ref: metrics              # branch where the raw reports live

    # 2️⃣  Set up Python + dependency cache
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'              # built‑in pip cache :contentReference[oaicite:0]{index=0}

    # 3️⃣  Install plotting libs (≈ 1 s when cache hits)
    - run: pip install matplotlib pandas

    # 4️⃣  Build the PNG chart from all txt reports
    - name: Build trend chart
      id: build
      run: |
        python - <<'PY'
        import re, pathlib, datetime as dt, sys
        import matplotlib.pyplot as plt

        reports_dir = pathlib.Path('reports')
        pattern = re.compile(r'git-hours-(\d{4}-\d{2}-\d{2})\.txt')

        dates, hours = [], []

        for fp in sorted(reports_dir.glob('git-hours-*.txt')):
            m = pattern.match(fp.name)
            if not m:
                continue
            date = dt.datetime.strptime(m.group(1), '%Y-%m-%d')
            text = fp.read_text()
            m_total = re.search(r'Total hours.*?([0-9.]+)', text)
            if not m_total:
                continue
            dates.append(date)
            hours.append(float(m_total.group(1)))

        if not dates:
            print('::warning::No historical git‑hours reports found – skipping graph')
            sys.exit(0)

        plt.figure(figsize=(10, 4))
        plt.plot(dates, hours, marker='o', linewidth=2)
        plt.title('Coding‑hours trend')
        plt.xlabel('Week starting')
        plt.ylabel('Hours')
        plt.grid(True, linestyle='--', alpha=0.4)
        plt.tight_layout()
        out = reports_dir / 'coding-hours-trend.png'
        plt.savefig(out, dpi=150)
        print(f'Chart saved to {out}')
        PY

    # 5️⃣  Commit chart back to metrics (token injected as env var)
    - name: Commit chart
      if: steps.build.outcome == 'success'
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        if [ -z "$GH_TOKEN" ]; then
          echo "GH_PAT secret not set – skipping chart commit"
          exit 0
        fi
        git config --global user.name  "git-hours bot"
        git config --global user.email "bot@github.com"
        git add reports/coding-hours-trend.png
        git commit -m "chore(metrics): update coding‑hours trend graph" || {
          echo "No chart changes to commit"; exit 0; }
        git push "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}" HEAD:metrics

    # 6️⃣  Upload chart as workflow artefact
    - uses: actions/upload-artifact@v4
      if: steps.build.outcome == 'success'
      with:
        name: coding-hours-trend-${{ github.run_id }}
        path: reports/coding-hours-trend.png
        retention-days: 30

    # 7️⃣  Embed the image in the run summary
    - name: Add chart to summary
      if: steps.build.outcome == 'success'
      run: |
        echo "## 📈 Coding‑hours trend"       >> "$GITHUB_STEP_SUMMARY"
        echo "Generated from historical raw reports in \`metrics/reports\`." >> "$GITHUB_STEP_SUMMARY"
        echo ""                                >> "$GITHUB_STEP_SUMMARY"
        echo "<img src=\"reports/coding-hours-trend.png\">" >> "$GITHUB_STEP_SUMMARY"
