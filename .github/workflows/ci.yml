name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Workspace
    runs-on: self-hosted-windows-lv
    steps:
      - name: Check out code (full depth)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Trust repo folder (safe.directory)
        shell: pwsh
        run: git config --global --add safe.directory "$Env:GITHUB_WORKSPACE"

  version:
    name: Compute Version
    needs: prepare
    runs-on: self-hosted-windows-lv
    outputs:
      VERSION:        ${{ steps.next_version.outputs.VERSION }}
      MAJOR:          ${{ steps.next_version.outputs.MAJOR }}
      MINOR:          ${{ steps.next_version.outputs.MINOR }}
      PATCH:          ${{ steps.next_version.outputs.PATCH }}
      BUILD:          ${{ steps.inc_build.outputs.new_build_number }}
      IS_PRERELEASE:  ${{ steps.next_version.outputs.IS_PRERELEASE }}
    steps:
      - name: Determine bump type
        id: bump_type
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let bump = 'none';
            if (context.event_name === 'pull_request') {
              const labels = context.payload.pull_request.labels.map(l => l.name.toLowerCase());
              if (labels.includes('major'))  bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
              else if (labels.includes('patch')) bump = 'patch';
            }
            core.setOutput('bump_type', bump);

      - name: Determine build number
        id: inc_build
        shell: pwsh
        run: |
          git fetch --unshallow 2>$null || Write-Host "Already a full clone."
          $commitCount = git rev-list --count HEAD
          Write-Host "Commit-based build number => $commitCount"
          "new_build_number=$commitCount" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

      - name: Compute version string
        id: next_version
        shell: pwsh
        env:
          BUMP_TYPE:    ${{ steps.bump_type.outputs.bump_type }}
          BUILD_NUMBER: ${{ steps.inc_build.outputs.new_build_number }}
        run: |
          $latestTag = (git describe --tags --abbrev=0 2>$null).TrimStart('v') -replace '-build.*'
          if (-not $latestTag) { $maj=0; $min=0; $pat=0 }
          else { $maj,$min,$pat = $latestTag.Split('.') }
          switch ($env:BUMP_TYPE) {
            'major' { $maj = [int]$maj +1; $min=0; $pat=0 }
            'minor' { $min = [int]$min +1; $pat=0 }
            'patch' { $pat = [int]$pat +1 }
          }
          $branch = $Env:GITHUB_REF -replace '^refs/heads/',''
          $suffix = ''
          if ($branch -like 'release-alpha/*') { $suffix = "alpha.$($Env:BUILD_NUMBER)" }
          elseif ($branch -like 'release-beta/*')  { $suffix = "beta.$($Env:BUILD_NUMBER)" }
          elseif ($branch -like 'release-rc/*')    { $suffix = "rc.$($Env:BUILD_NUMBER)" }

          if ($suffix) {
            $version = "v$maj.$min.$pat-$suffix-build$($Env:BUILD_NUMBER)"
            $pre = 'true'
          } else {
            $version = "v$maj.$min.$pat-build$($Env:BUILD_NUMBER)"
            $pre = 'false'
          }

          Write-Host "Computed version => $version"
          "VERSION=$version"             | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "MAJOR=$maj"                   | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "MINOR=$min"                   | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "PATCH=$pat"                   | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "IS_PRERELEASE=$pre"           | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

  apply-deps:
    name: Apply VIPC Dependencies
    needs: prepare
    runs-on: self-hosted-windows-lv
    steps:
      - name: Apply 2021 32-bit VIPC
        uses: ./.github/actions/apply-vipc
        with:
          minimum_supported_lv_version: "2021"
          vip_lv_version:           "2021"
          supported_bitness:        "32"
          relative_path:            ${{ github.workspace }}
          scripts_folder:           "${{ github.workspace }}/pipeline/scripts"
          vipc_path:                "Tooling/deployment/runner_dependencies.vipc"

      - name: Apply 2021 64-bit VIPC
        uses: ./.github/actions/apply-vipc
        with:
          minimum_supported_lv_version: "2021"
          vip_lv_version:           "2021"
          supported_bitness:        "64"
          relative_path:            ${{ github.workspace }}
          scripts_folder:           "${{ github.workspace }}/pipeline/scripts"
          vipc_path:                "Tooling/deployment/runner_dependencies.vipc"

      - name: Apply 2023 64-bit VIPC
        uses: ./.github/actions/apply-vipc
        with:
          minimum_supported_lv_version: "2023"
          vip_lv_version:           "2023"
          supported_bitness:        "64"
          relative_path:            ${{ github.workspace }}
          scripts_folder:           "${{ github.workspace }}/pipeline/scripts"
          vipc_path:                "Tooling/deployment/runner_dependencies_2023.vipc"

      - name: Summarize applied VIPC versions
        shell: pwsh
        run: |
          $summary = "Applied VIPC for: 2021 (32-bit), 2021 (64-bit), 2023 (64-bit)"
          Write-Host $summary
          Add-Content -Path $Env:GITHUB_STEP_SUMMARY -Value "## VIPC Dependency Summary`n$summary"

  test:
    name: Run Unit Tests
    needs: [prepare, apply-deps]
    runs-on: ${{ matrix.os == 'windows' && 'self-hosted-windows-lv' || 'self-hosted-linux-lv' }}
    strategy:
      matrix:
        os: [windows]
        'lv-version': ["2021"]
        bitness: ["32","64"]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run unit tests
        shell: pwsh
        working-directory: pipeline/scripts
        run: |
          .\RunUnitTests.ps1 `
            -MinimumSupportedLVVersion ${{ matrix['lv-version'] }} `
            -SupportedBitness ${{ matrix.bitness }}

      - name: Summarize test results
        if: always()
        shell: pwsh
        working-directory: pipeline/scripts
        run: |
          $reportPath = ".\UnitTestReport.xml"
          if (Test-Path $reportPath) {
            [xml]$xmlDoc = Get-Content $reportPath
            $cases = $xmlDoc.SelectNodes("//testcase")
            if ($cases) {
              $md = "## LabVIEW Unit Test Results`n"
              $md += "| TestCaseName | ClassName | Status | Time(s) | Assertions |`n"
              $md += "|---|---|---|---|---|`n"
              foreach ($c in $cases) {
                $md += "| $($c.GetAttribute('name')) | $($c.GetAttribute('classname')) | $($c.GetAttribute('status')) | $($c.GetAttribute('time')) | $($c.GetAttribute('assertions')) |`n"
              }
              Add-Content -Path $Env:GITHUB_STEP_SUMMARY -Value $md
            }
          }

  build-package:
    name: Build VI Package
    needs: [version, test, apply-deps]
    runs-on: self-hosted-windows-lv
    permissions:
      contents: write
      issues: read
      pull-requests: read
    env:
      MAJOR:                 ${{ needs.version.outputs.MAJOR }}
      MINOR:                 ${{ needs.version.outputs.MINOR }}
      PATCH:                 ${{ needs.version.outputs.PATCH }}
      BUILD:                 ${{ needs.version.outputs.BUILD }}
      COMMIT:                ${{ github.sha }}
      DRAFT_RELEASE:         true
      USE_AUTO_NOTES:        true
      DISABLE_GPG_ON_FORKS:  false
      ATTACH_ARTIFACTS_TO_RELEASE: true
    steps:
      - name: Possibly disable GPG signing on forks
        if: ${{ env.DISABLE_GPG_ON_FORKS == 'true' }}
        id: disable_signing
        shell: pwsh
        run: |
          if ("${{ github.repository }}" -ne "ni/labview-icon-editor") {
            git config --global commit.gpgsign false
            git config --global tag.gpgsign false
          }

      - name: Build the icon editor VI package
        shell: pwsh
        run: |
          $repoRoot      = $Env:GITHUB_WORKSPACE
          $scriptsFolder = Join-Path $repoRoot 'pipeline/scripts'
          $org, $repo    = $Env:GITHUB_REPOSITORY -split '/'
          .\pipeline\scripts\Build.ps1 `
            -RelativePath        $repoRoot `
            -AbsolutePathScripts $scriptsFolder `
            -Major               $Env:MAJOR `
            -Minor               $Env:MINOR `
            -Patch               $Env:PATCH `
            -Build               $Env:BUILD `
            -Commit              $Env:COMMIT `
            -CompanyName         $org `
            -AuthorName          $repo

      - name: Discover .vip path
        id: find_vip
        shell: pwsh
        run: |
          $vipFile = Get-ChildItem -Path "builds/VI Package" -Filter "*.vip" -ErrorAction Stop |
                     Select-Object -First 1
          "vip_path=$($vipFile.FullName)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

      - name: Upload ephemeral artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.version.outputs.VERSION }}
          path: ${{ steps.find_vip.outputs.vip_path }}

      - name: Create & push tag
        if: ${{ github.event_name != 'pull_request' }}
        shell: pwsh
        run: |
          $VERSION = "${{ needs.version.outputs.VERSION }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $VERSION -m "Auto-tag by CI for $VERSION"
          git push origin $VERSION

      - name: Create GitHub Release
        if: ${{ success() && github.event_name != 'pull_request' }}
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const versionTag = '${{ needs.version.outputs.VERSION }}';
            const draftRelease = (process.env.DRAFT_RELEASE || 'true').toLowerCase() === 'true';
            const useAutoNotes = (process.env.USE_AUTO_NOTES || 'true').toLowerCase() === 'true';
            const isPrerelease = (('${{ needs.version.outputs.IS_PRERELEASE }}' || '').toLowerCase() === 'true');
            const createParams = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: versionTag,
              name: versionTag,
              draft: draftRelease,
              prerelease: isPrerelease
            };
            if (useAutoNotes) { createParams.generate_release_notes = true; }
            else { createParams.body = "Reference local release notes or embed within .vip."; }
            const response = await github.rest.repos.createRelease(createParams);
            core.setOutput("release_id", response.data.id);

      - name: Attach .vip file(s) to Release
        if: ${{ success() && env.ATTACH_ARTIFACTS_TO_RELEASE == 'true' && github.event_name != 'pull_request' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const releaseId = parseInt('${{ steps.create_release.outputs.release_id }}', 10);
            const vipDir = path.join(process.env.GITHUB_WORKSPACE, 'builds', 'VI Package');
            for (const vipFile of fs.readdirSync(vipDir).filter(f => f.endsWith('.vip'))) {
              const data = fs.readFileSync(path.join(vipDir, vipFile));
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: vipFile,
                data,
                headers: { 'content-type': 'application/octet-stream' }
              });
            }
