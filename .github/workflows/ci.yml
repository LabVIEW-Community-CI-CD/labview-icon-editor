name: CI Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Workspace
    runs-on: self-hosted-windows-lv
    steps:
      - name: Check out code (full depth, clean)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          clean: true
          persist-credentials: true
      - name: Trust repo folder (Git safe.directory)
        shell: pwsh
        run: git config --global --add safe.directory "$Env:GITHUB_WORKSPACE"

  version:
    name: Compute Version
    needs: prepare
    runs-on: self-hosted-windows-lv
    outputs:
      VERSION:        ${{ steps.next_version.outputs.VERSION }}
      MAJOR:          ${{ steps.next_version.outputs.MAJOR }}
      MINOR:          ${{ steps.next_version.outputs.MINOR }}
      PATCH:          ${{ steps.next_version.outputs.PATCH }}
      BUILD:          ${{ steps.inc_build.outputs.new_build_number }}
      IS_PRERELEASE:  ${{ steps.next_version.outputs.IS_PRERELEASE }}
    steps:
      - name: Determine bump type
        id: bump_type
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let bump = 'none';
            if (context.event_name === 'pull_request') {
              const labels = context.payload.pull_request.labels.map(l => l.name.toLowerCase());
              if (labels.includes('major')) bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
              else if (labels.includes('patch')) bump = 'patch';
            }
            core.setOutput('bump_type', bump);

      - name: Determine build number
        id: inc_build
        shell: pwsh
        run: |
          git fetch --unshallow 2>$null || Write-Host "Already a full clone."
          $count = git rev-list --count HEAD
          Write-Host "Commit-based build number => $count"
          "new_build_number=$count" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

      - name: Compute version string
        id: next_version
        shell: pwsh
        env:
          BUMP_TYPE:    ${{ steps.bump_type.outputs.bump_type }}
          BUILD_NUMBER: ${{ steps.inc_build.outputs.new_build_number }}
        run: |
          $latest = (git describe --tags --abbrev=0 2>$null).TrimStart('v') -replace '-build.*'
          if (-not $latest) { $maj=0; $min=0; $pat=0 } else { $maj,$min,$pat = $latest.Split('.') }
          switch ($env:BUMP_TYPE) {
            'major' { $maj++; $min=0; $pat=0 }
            'minor' { $min++; $pat=0 }
            'patch' { $pat++ }
          }
          $branch = $Env:GITHUB_REF -replace '^refs/heads/',''
          $suffix = ''
          if ($branch -like 'release-alpha/*') { $suffix = "alpha.$($Env:BUILD_NUMBER)" }
          elseif ($branch -like 'release-beta/*')  { $suffix = "beta.$($Env:BUILD_NUMBER)" }
          elseif ($branch -like 'release-rc/*')    { $suffix = "rc.$($Env:BUILD_NUMBER)" }
          $version = if ($suffix) { "v$maj.$min.$pat-$suffix-build$($Env:BUILD_NUMBER)" } else { "v$maj.$min.$pat-build$($Env:BUILD_NUMBER)" }
          $isPre  = if ($suffix) { 'true' } else { 'false' }
          Write-Host "Computed version => $version"
          "VERSION=$version"             | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "MAJOR=$maj"                  | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "MINOR=$min"                  | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "PATCH=$pat"                  | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "IS_PRERELEASE=$isPre"        | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

  apply-deps:
    name: Apply VIPC Dependencies
    needs: prepare
    runs-on: self-hosted-windows-lv
    strategy:
      matrix:
        include:
          - lv-version: "2021"
            bitness: "32"
          - lv-version: "2021"
            bitness: "64"
          - lv-version: "2023"
            bitness: "64"
    steps:
      - name: Checkout for VIPC
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          clean: true
          persist-credentials: true

      - name: Apply VIPC for ${{ matrix['lv-version'] }} (${{ matrix.bitness }}-bit)
        uses: ./.github/actions/apply-vipc
        with:
          minimum_supported_lv_version: ${{ matrix['lv-version'] }}
          vip_lv_version:               ${{ matrix['lv-version'] }}
          supported_bitness:            ${{ matrix.bitness }}
          relative_path:                ${{ github.workspace }}
          scripts_folder:               "${{ github.workspace }}/pipeline/scripts"
          vipc_path:                    "Tooling/deployment/runner_dependencies.vipc"

      - name: Summarize VIPC
        shell: pwsh
        run: |
          Add-Content -Path $Env:GITHUB_STEP_SUMMARY -Value "- $(${{ matrix['lv-version'] }}) ($(${{ matrix.bitness }})-bit)"

  test:
    name: Run Unit Tests
    needs: [prepare, apply-deps]
    runs-on: ${{ matrix.os == 'windows' && 'self-hosted-windows-lv' || 'self-hosted-linux-lv' }}
    strategy:
      matrix:
        os: [windows]
        'lv-version': ["2021"]
        bitness: ["32","64"]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run unit tests
        shell: pwsh
        working-directory: pipeline/scripts
        run: .\RunUnitTests.ps1 -MinimumSupportedLVVersion ${{ matrix['lv-version'] }} -SupportedBitness ${{ matrix.bitness }}
      - name: Summarize test results
        if: always()
        shell: pwsh
        working-directory: pipeline/scripts
        run: |
          $r=".\UnitTestReport.xml"; if (Test-Path $r) { [xml]$x=Get-Content $r; $c=$x.SelectNodes('//testcase'); if ($c) {$m="## LabVIEW Unit Test Results`n|Name|Class|Status|Time(s)|Assertions|`n|---|---|---|---|---|`n"; foreach($i in $c){$m+="|$($i.name)|$($i.classname)|$($i.status)|$($i.time)|$($i.assertions)|`n"}; Add-Content -Path $Env:GITHUB_STEP_SUMMARY -Value $m }}

  build-package:
    name: Build VI Package
    needs: [version, test, apply-deps]
    runs-on: self-hosted-windows-lv
    permissions:
      contents: write
      issues: read
      pull-requests: read
    env:
      MAJOR:                ${{ needs.version.outputs.MAJOR }}
      MINOR:                ${{ needs.version.outputs.MINOR }}
      PATCH:                ${{ needs.version.outputs.PATCH }}
      BUILD:                ${{ needs.version.outputs.BUILD }}
      COMMIT:               ${{ github.sha }}
      DRAFT_RELEASE:        true
      USE_AUTO_NOTES:       true
      DISABLE_GPG_ON_FORKS: false
      ATTACH_ARTIFACTS_TO_RELEASE: true
    steps:
      - name: Possibly disable GPG signing on forks
        if: ${{ env.DISABLE_GPG_ON_FORKS == 'true' }}
        shell: pwsh
        run: |
          if ("${{ github.repository }}" -ne "ni/labview-icon-editor") { git config --global commit.gpgsign false; git config --global tag.gpgsign false }
      - name: Build the icon editor VI package
        shell: pwsh
        run: |
          $r=$Env:GITHUB_WORKSPACE; $s=Join-Path $r 'pipeline/scripts';
          $o,$t = $Env:GITHUB_REPOSITORY -split '/';
          .\pipeline\scripts\Build.ps1 \
            -RelativePath $r \
            -AbsolutePathScripts $s \
            -Major $Env:MAJOR \
            -Minor $Env:MINOR \
            -Patch $Env:PATCH \
            -Build $Env:BUILD \
            -Commit $Env:COMMIT \
            -CompanyName $o \
            -AuthorName $t

  upload-artifact:
    name: Upload VIP Artifact
    needs: build-package
    runs-on: self-hosted-windows-lv
    steps:
      - name: Upload VIP Artifact
        uses: ./.github/actions/upload-vip-artifact

  tag-release:
    name: Tag & Release VI Package
    needs: build-package
    runs-on: self-hosted-windows-lv
    steps:
      - name: Tag & Release VI Package
        uses: ./.github/actions/tag-release
