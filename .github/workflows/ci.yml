name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare Workspace
    runs-on: self-hosted-windows-lv
    steps:
      - name: Check out code (full depth)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Trust repo folder (safe.directory)
        shell: pwsh
        run: git config --global --add safe.directory "$Env:GITHUB_WORKSPACE"

  version:
    name: Compute Version
    needs: prepare
    runs-on: self-hosted-windows-lv
    outputs:
      VERSION: ${{ steps.next_version.outputs.VERSION }}
      MAJOR:   ${{ steps.next_version.outputs.MAJOR }}
      MINOR:   ${{ steps.next_version.outputs.MINOR }}
      PATCH:   ${{ steps.next_version.outputs.PATCH }}
      BUILD:   ${{ steps.inc_build.outputs.new_build_number }}
      IS_PRERELEASE: ${{ steps.next_version.outputs.IS_PRERELEASE }}
    steps:
      - name: Determine bump type
        id: bump_type
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let bump = 'none';
            if (context.event_name === 'pull_request') {
              const labels = context.payload.pull_request.labels.map(l=>l.name.toLowerCase());
              if (labels.includes('major'))  bump = 'major';
              else if (labels.includes('minor')) bump = 'minor';
              else if (labels.includes('patch')) bump = 'patch';
            }
            core.setOutput('bump_type', bump);

      - name: Determine build number
        id: inc_build
        shell: pwsh
        run: |
          git fetch --unshallow 2>$null || Write-Host "Already full clone"
          $count = git rev-list --count HEAD
          Write-Host "build => $count"
          "new_build_number=$count" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

      - name: Compute version string
        id: next_version
        shell: pwsh
        env:
          BUMP_TYPE: ${{ steps.bump_type.outputs.bump_type }}
          BUILD_NUMBER: ${{ steps.inc_build.outputs.new_build_number }}
        run: |
          $latest = (git describe --tags --abbrev=0 2>$null).TrimStart('v') -replace '-build.*'
          if (-not $latest) { $maj=0; $min=0; $pat=0 }
          else { $maj,$min,$pat = $latest.Split('.') }
          switch ($env:BUMP_TYPE) {
            'major' { $maj = [int]$maj +1; $min=0; $pat=0 }
            'minor' { $min = [int]$min +1; $pat=0 }
            'patch' { $pat = [int]$pat +1 }
          }
          $branch = $Env:GITHUB_REF -replace '^refs/heads/',''
          $suffix = ''
          if ($branch -like 'release-alpha/*') { $suffix = "alpha.$($Env:BUILD_NUMBER)" }
          elseif ($branch -like 'release-beta/*')  { $suffix = "beta.$($Env:BUILD_NUMBER)" }
          elseif ($branch -like 'release-rc/*')    { $suffix = "rc.$($Env:BUILD_NUMBER)" }

          if ($suffix) {
            $ver = "v$maj.$min.$pat-$suffix-build$($Env:BUILD_NUMBER)"
            $pre = 'true'
          } else {
            $ver = "v$maj.$min.$pat-build$($Env:BUILD_NUMBER)"
            $pre = 'false'
          }

          Write-Host "VERSION => $ver"
          "VERSION=$ver"                 | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "MAJOR=$maj"                   | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "MINOR=$min"                   | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "PATCH=$pat"                   | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "IS_PRERELEASE=$pre"           | Out-File -FilePath $Env:GITHUB_OUTPUT -Append

  test:
    name: Run Unit Tests
    needs: prepare
    runs-on: ${{ matrix.os == 'windows' && 'self-hosted-windows-lv' || 'self-hosted-linux-lv' }}
    strategy:
      matrix:
        os: [windows]
        'lv-version': ["2021"]
        bitness: ["32","64"]
      fail-fast: false
    steps:
      - name: Checkout repo (light)
        uses: actions/checkout@v4

      - name: Run unit tests
        shell: pwsh
        working-directory: pipeline/scripts
        run: .\RunUnitTests.ps1 `
               -MinimumSupportedLVVersion ${{ matrix['lv-version'] }} `
               -SupportedBitness ${{ matrix.bitness }}

      - name: Summarize results
        if: always()
        shell: pwsh
        working-directory: pipeline/scripts
        run: |
          $r=".\\UnitTestReport.xml"
          if (Test-Path $r) {
            [xml]$doc=Get-Content $r
            $cases=$doc.SelectNodes("//testcase")
            if ($cases) {
              $m="## Results`n|Name|Class|Status|Time|Assert|`n|---|---|---|---|---|`n"
              foreach ($c in $cases) {
                $m+="$($c.name)|$($c.classname)|$($c.status)|$($c.time)|$($c.assertions)`n"
              }
              Add-Content $Env:GITHUB_STEP_SUMMARY -Value $m
            }
          }

  build-package:
    name: Build VI Package
    needs: [version, test]
    runs-on: self-hosted-windows-lv
    env:
      MAJOR:         ${{ needs.version.outputs.MAJOR }}
      MINOR:         ${{ needs.version.outputs.MINOR }}
      PATCH:         ${{ needs.version.outputs.PATCH }}
      BUILD:         ${{ needs.version.outputs.BUILD }}
      COMMIT:        ${{ github.sha }}
      DRAFT_RELEASE: true
      USE_AUTO_NOTES: true
      DISABLE_GPG_ON_FORKS: false
      ATTACH_ARTIFACTS_TO_RELEASE: true

    steps:
      - name: Possibly disable GPG (forks)
        if: ${{ env.DISABLE_GPG_ON_FORKS == 'true' }}
        id: disable_signing
        shell: pwsh
        run: |
          if ("${{ github.repository }}" -ne "ni/labview-icon-editor") {
            git config --global commit.gpgsign false
            git config --global tag.gpgsign false
          }

      - name: Build the VI package
        shell: pwsh
        run: |
          $root = $Env:GITHUB_WORKSPACE
          $org,$repo = $Env:GITHUB_REPOSITORY -split '/'
          .\pipeline\scripts\Build.ps1 `
            -RelativePath $root `
            -AbsolutePathScripts (Join-Path $root 'pipeline/scripts') `
            -Major $Env:MAJOR `
            -Minor $Env:MINOR `
            -Patch $Env:PATCH `
            -Build $Env:BUILD `
            -Commit $Env:COMMIT `
            -CompanyName $org `
            -AuthorName $repo

  upload-artifact:
    name: Upload .vip Artifact
    needs: build-package
    runs-on: self-hosted-windows-lv
    steps:
      - name: Find .vip file
        id: find_vip
        shell: pwsh
        run: |
          $f = Get-ChildItem "builds/VI Package" -Filter '*.vip' |
               Select-Object -First 1
          "vip_path=$($f.FullName)" | Out-File $Env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.version.outputs.VERSION }}
          path: ${{ steps.find_vip.outputs.vip_path }}

  release:
    name: Tag & Release
    needs: build-package
    runs-on: self-hosted-windows-lv
    if: github.event_name != 'pull_request'
    steps:
      - name: Create & push tag
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ needs.version.outputs.VERSION }} -m "Auto-tag ${{ needs.version.outputs.VERSION }}"
          git push origin ${{ needs.version.outputs.VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ needs.version.outputs.VERSION }}';
            const pre = '${{ needs.version.outputs.IS_PRERELEASE }}' === 'true';
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: tag,
              draft: true,
              prerelease: pre,
              generate_release_notes: true
            });
            core.setOutput('release_id', response.data.id);

      - name: Attach .vip to release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const id = parseInt('${{ steps.create_release.outputs.release_id }}',10);
            const fs = require('fs'), path = require('path');
            const dir = path.join(process.env.GITHUB_WORKSPACE,'builds','VI Package');
            for (const file of fs.readdirSync(dir)) {
              if (file.endsWith('.vip')) {
                const data = fs.readFileSync(path.join(dir,file));
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: id,
                  name: file,
                  data,
                  headers: { 'content-type':'application/octet-stream' }
                });
              }
            }
